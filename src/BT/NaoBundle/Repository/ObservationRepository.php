<?php

namespace BT\NaoBundle\Repository;

/**
 * ObservationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ObservationRepository extends \Doctrine\ORM\EntityRepository
{
    public function countToValidate()
    {
       $qb = $this->createQueryBuilder('o')
       ->select('COUNT(o)')
       ->where('o.confirm = 1')
       ->getQuery()
       ->getSingleScalarResult();

       return $qb;
    }

        public function countRefuse($userid)
    {
       $qb = $this->createQueryBuilder('o')
       ->select('COUNT(o)')
       ->where('o.confirm = 3')
       ->andWhere('o.user = :userid')
       ->setParameter('userid', $userid)
       ->getQuery()
       ->getSingleScalarResult();

       return $qb;
    }

    public function countConfirm($userid)
    {
       $qb = $this->createQueryBuilder('o')
       ->select('COUNT(o)')
       ->where('o.confirm = 2')
       ->andWhere('o.user = :userid')
       ->setParameter('userid', $userid)
       ->getQuery()
       ->getSingleScalarResult();

       return $qb;
    }

    public function countNoConfirm($userid)
    {
        $qb = $this->createQueryBuilder('o')
            ->select('COUNT(o)')
            ->where('o.confirm = 1')
            ->andWhere('o.user = :userid')
            ->setParameter('userid', $userid)
            ->getQuery()
            ->getSingleScalarResult();

        return $qb;
    }


    public function myObservations($user_id)
    {
        $qb = $this->createQueryBuilder('o')
            ->where('o.user = :user_id')
            ->setParameter('user_id', $user_id)
            ->getQuery()
            ->getResult();

        return $qb;
    }

    public function findNoValid()
    {
        $qb = $this->createQueryBuilder('o')
            ->where('o.confirm = 1')
            ->getQuery();
        return $qb;
    }

    public function findValid($id = null)
    {
        if ($id) {
            $qb = $this->createQueryBuilder('o')
                ->where('o.confirm = 2')
                ->leftJoin('o.bird', 'b')
                ->where('b.id = :id')
                ->setParameter('id', $id)
                ->getQuery()
                ->getResult();

            return $qb;
        }

        $qb = $this->createQueryBuilder('o')
            ->where('o.confirm = 2')
            ->getQuery()
            ->getResult();

        return $qb;
    }

    public function findThreeValid()
    {
        $qb = $this->createQueryBuilder('o')
            ->where('o.confirm = 2')
            ->orderBy('o.date', 'DESC')
            ->setMaxResults(3)
            ->setFirstResult(0)
            ->getQuery()
            ->getResult();

        return $qb;
    }

    public function findObservations($term)
    {
        $qb = $this->createQueryBuilder('o')
            ->where('o.confirm = 2')
            ->leftJoin('o.bird', 'b')
            ->select('b.id')
            ->addSelect('b.nomVern')
            ->addSelect('b.nomValide')
            ->andWhere('b.nomVern LIKE :term')
            ->setParameter('term', $term . '%')
            ->getQuery()
            ->getResult(\Doctrine\ORM\Query::HYDRATE_ARRAY);
        return $qb;
    }



}
